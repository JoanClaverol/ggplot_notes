# The previous plot, without CI ribbon
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE)
# The previous plot, without points
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm", se = FALSE)
# 1 - Define cyl as a factor variable
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
# 2 - Plot 1, plus another stat_smooth() containing a nested aes()
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
stat_smooth(method = "lm", se = FALSE, aes(group = 1))
# Plot 1: change the LOESS span
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point() +
# Add span below
geom_smooth(se = FALSE, span = 0.7)
# Plot 2: Set the second stat_smooth() to use LOESS with a span of 0.7
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
# Change method and add span below
stat_smooth(method = "loess", aes(group = 1),
se = FALSE, col = "black", span = 0.7)
# Plot 3: Set col to "All", inside the aes layer of stat_smooth()
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = FALSE, span = 0.7)
library(RColorBrewer)
# Plot 4: Add scale_color_manual to change the colors
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE, span = 0.7) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = FALSE, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
# Plot 1: Jittered scatter plot, add a linear model (lm) smooth
ggplot(Vocab, aes(x = education, y = vocabulary)) +
geom_jitter(alpha = 0.2) +
stat_smooth(method = "lm", se = FALSE) # smooth
# Plot 2: points, colored by year
ggplot(Vocab, aes(x = education, y = vocabulary, col = year)) +
geom_jitter(alpha = 0.2)
# Plot 3: lm, colored by year
ggplot(Vocab, aes(x = education, y = vocabulary, col = factor(year))) +
stat_smooth(method = "lm", se = FALSE) # smooth
# Plot 4: Set a color brewer palette
ggplot(Vocab, aes(x = education, y = vocabulary, col = factor(year))) +
stat_smooth(method = "lm", se = FALSE) +  # smooth
scale_color_brewer()  # colors
# Plot 5: Add the group aes, specify alpha and size
ggplot(Vocab, aes(x = education, y = vocabulary, col = year, group = factor(year))) +
stat_smooth(method = "lm", se = FALSE, alpha = 0.6, size = 2) +
scale_color_gradientn(colors = brewer.pal(9, "YlOrRd"))
# Use stat_quantile instead of stat_smooth
ggplot(Vocab, aes(x = education, y = vocabulary, col = year, group = factor(year))) +
stat_quantile(alpha = 0.6, size = 2) +
scale_color_gradientn(colors = brewer.pal(9,"YlOrRd"))
# Set quantile to 0.5
ggplot(Vocab, aes(x = education, y = vocabulary, col = year, group = factor(year))) +
stat_quantile(alpha = 0.6, size = 2, quantiles = 0.5) +
scale_color_gradientn(colors = brewer.pal(9,"YlOrRd"))
# Plot 1: Jittering only
p <- ggplot(Vocab, aes(x = education, y = vocabulary)) +
geom_jitter(alpha = 0.2)
p
# Plot 2: Add stat_sum
p +
stat_sum() # sum statistic
# Plot 3: Set size range
p +
stat_sum() + # sum statistic
scale_size(range = c(1, 10)) # set size scale
# Plot with linear and loess model
p <- ggplot(Vocab, aes(x = education, y = vocabulary)) +
stat_smooth(method = "loess", aes(col = "red"), se = F) +
stat_smooth(method = "lm", aes(col = "blue"), se = F) +
scale_color_discrete("Model", labels = c("red" = "LOESS", "blue" = "lm"))
# Add stat_sum
p + stat_sum()
# Add stat_sum and set size range
p + stat_sum() + scale_size(range = c(1,10))
# vector of values to be ready
set.seed(123)
xx <- rnorm(100)
# Convert cyl and am to factors
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$am <- as.factor(mtcars$am)
# Define positions
posn.d <- position_dodge(0.1)
posn.jd <- position_jitterdodge(jitter.width = 0.1, dodge.width = 0.2)
posn.j <- position_jitter(0.2)
# Base layers
wt.cyl.am <- ggplot(mtcars, aes(x = cyl,
y = wt,
col = am,
fill = am,
group = am))
wt.cyl.am <- ggplot(mtcars, aes(x = cyl,  y = wt, col = am, fill = am, group = am))
# Plot 1: Jittered, dodged scatter plot with transparent points
wt.cyl.am +
geom_point(position = posn.jd, alpha = 0.6)
# Plot 2: Mean and SD - the easy way
wt.cyl.am +
stat_summary(fun.data = mean_sdl, fun.args = list(mult = 1), position = posn.d)
# # Plot 3: Mean and 95% CI - the easy way
# wt.cyl.am +
#   stat_summary(fun.data = mean_cl_normal, position = posn.d)
# Plot 4: Mean and SD - with T-tipped error bars - fill in ___
wt.cyl.am +
stat_summary(geom = "point", fun.y = mean,
position = posn.d) +
stat_summary(geom = "errorbar", fun.data = mean_sdl,
position = posn.d, fun.args = list(mult = 1), width = 0.1)
mean_sdl(xx, mult = 1)
# Function to save range for use in ggplot
gg_range <- function(x) {
# Change x below to return the instructed values
data.frame(ymin = min(x), # Min
ymax = max(x)) # Max
}
gg_range(xx)
# Required output
#   ymin ymax
# 1    1  100
# Function to Custom function:
med_IQR <- function(x) {
# Change x below to return the instructed values
data.frame(y =  median(x), # Median
ymin = quantile(x)[2], # 1st quartile
ymax = quantile(x)[4])  # 3rd quartile
}
med_IQR(xx)
# Required output
#        y  ymin  ymax
# 25% 50.5 25.75 75.25
# The base ggplot command; you don't have to change this
wt.cyl.am <- ggplot(mtcars, aes(x = cyl,y = wt, col = am, fill = am, group = am))
# Add three stat_summary calls to wt.cyl.am
wt.cyl.am +
stat_summary(geom = "linerange", fun.data = med_IQR,
position = posn.d, size = 3) +
stat_summary(geom = "linerange", fun.data = gg_range,
position = posn.d, size = 3,
alpha = 0.4) +
stat_summary(geom = "point", fun.y = median,
position = posn.d, size = 3,
col = "black", shape = "X")
# Basic ggplot() command, coded for you
p <- ggplot(mtcars, aes(x = wt, y = hp, col = am)) +
geom_point() + geom_smooth()
p
# Add scale_x_continuous()
p +
scale_x_continuous(limits = c(3, 6), expand = c(0, 0))
# Add coord_cartesian(): the proper way to zoom in
p +
coord_cartesian(xlim = c(3, 6))
# Complete basic scatter plot function
base.plot <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, col = Species)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
# Plot base.plot: default aspect ratio
base.plot
# Fix aspect ratio (1:1) of base.plot
base.plot + coord_equal()
# or
base.plot + coord_fixed()
# Create a stacked bar plot: wide.bar
wide.bar <- ggplot(mtcars, aes(x = 1, fill = cyl)) +
geom_bar()
wide.bar
# Convert wide.bar to pie chart
wide.bar +
coord_polar(theta = "y")
# Create stacked bar plot: thin.bar
thin.bar <- ggplot(mtcars, aes(x = 1, fill = cyl)) +
geom_bar(width = .1) +
scale_x_continuous(limits = c(0.5,1.5))
thin.bar
# Convert thin.bar to "ring" type pie chart
thin.bar +
coord_polar(theta = "y")
# Basic scatter plot
p <- ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
p
# 1 - Separate rows according to transmission type, am
p +
facet_grid(am ~ .)
# 2 - Separate columns according to cylinders, cyl
p +
facet_grid(. ~ cyl)
# 3 - Separate by both columns and rows
p +
facet_grid(am ~ cyl)
knitr::opts_chunk$set(echo = TRUE, comment = NA, cache = TRUE,
message = FALSE, warning = FALSE)
# 3 - Plot 2, plus MAP ..density.. to the y aesthetic (i.e. in a second aes() function)
ggplot(mtcars, aes(mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 1)
library(ggplot2)
library(car)
# 3 - Plot 2, plus MAP ..density.. to the y aesthetic (i.e. in a second aes() function)
ggplot(mtcars, aes(mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 1)
# 4 - plot 3, plus SET the fill attribute to "#377EB8"
ggplot(mtcars, aes(mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "#377EB8")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar()
# Change the position argument to "stack""
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "stack")
# Change the position argument to "fill""
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "fill")
# Change the position argument to "dodge""
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar()
# Change the position argument to "stack""
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "stack")
# Change the position argument to "fill""
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "fill")
# Change the position argument to "dodge""
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar()
# Change the position argument to "stack""
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "stack")
# Change the position argument to "fill""
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "fill")
# Change the position argument to "dodge""
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "dodge")
# 1 - The last plot form the previous exercise
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(0.2)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = posn_d, alpha = 0.6)
# 1 - The last plot form the previous exercise
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(0.2)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = posn_d, alpha = 0.6)
# 1 - The last plot form the previous exercise
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = "dodge")
# 2 - Define posn_d with position_dodge()
posn_d <- position_dodge(0.2)
# 3 - Change the position argument to posn_d
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = posn_d)
# 4 - Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar(position = posn_d, alpha = 0.6)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, color = cyl)) +
geom_freqpoly(binwidth = 1)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, color = factor(cyl))) +
geom_freqpoly(binwidth = 1)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, color = factor(cyl))) +
geom_freqpoly(binwidth = 1)
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = factor(am))) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
# str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Final plot of last exercise
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues")
new_col <- colorRampPalette(c("#FFFFFF", "#0000FF"))
new_col(4) # the newly extrapolated colours
munsell::plot_hex(new_col(4)) # Quick and dirty plot
# Final plot of last exercise
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues")
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
# Final plot of last exercise
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
library(RColorBrewer)
blues <- brewer.pal(9, "Blues")
# Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
# Final plot of last exercise
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
library(RColorBrewer)
blues <- brewer.pal(9, "Blues")
# Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
# 1 - Basic histogram plot command
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
# 2 - Plot 1, Expand aesthetics: am onto fill
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1)
# 3 - Plot 2, change position = "dodge"
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1, position = "dodge")
# 4 - Plot 3, change position = "fill"
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1, position = "fill")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
# 6 - Plot 5, plus change mapping: cyl onto fill
ggplot(mtcars, aes(mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
# 1 - Basic histogram plot command
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
# 2 - Plot 1, Expand aesthetics: am onto fill
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1)
# 3 - Plot 2, change position = "dodge"
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1, position = "dodge")
# 4 - Plot 3, change position = "fill"
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1, position = "fill")
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
ggplot(mtcars, aes(mpg, fill = factor(am))) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
# 6 - Plot 5, plus change mapping: cyl onto fill
ggplot(mtcars, aes(mpg, fill = factor(cyl))) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
# Print out head of economics
# head(economics)
# Plot unemploy as a function of date using a line plot
ggplot(economics, aes(x = date, y = unemploy)) +
geom_line()
# Adjust plot to represent the fraction of total population that is unemployed
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line()
# Basic line plot
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line()
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
economics
?economics
recess <- read.csv2("../data/recess.csv")
recess
recess <- read.csv2("../data/recess.csv")
recess <- read.csv("../data/recess.csv")
recess
recess <- read.csv2("../data/recess.csv")
recess
names(recess) <- c("begin","end")
recess$begin <- as.Date(recess$begin)
recess
recess$begin <- as.Date(recess$begin, format = c("%Y-%m-$d"))
recess <- read.csv2("../data/recess.csv")
names(recess) <- c("begin","end")
recess$begin <- as.Date(recess$begin, format = c("%Y-%m-%d"))
recess
recess$begin <- as.Date(recess$begin, format = c("%Y/%m/%d"))
recess <- read.csv2("../data/recess.csv")
names(recess) <- c("begin","end")
recess$begin <- as.Date(recess$begin, format = c("%Y/%m/%d"))
recess
recess <- read.csv2("../data/recess.csv")
names(recess) <- c("begin","end")
recess$begin <- as.Date(recess$begin, format = c("%d/%m/%Y"))
recess
recess$end <- as.Date(recess$end, format = c("%d/%m/%Y"))
recess <- read.csv2("../data/recess.csv")
names(recess) <- c("begin","end")
recess$begin <- as.Date(recess$begin, format = c("%d/%m/%Y"))
recess$end <- as.Date(recess$end, format = c("%d/%m/%Y"))
recess
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
# Check the structure as a starting point
str(fish.species)
fish.species <- read.csv2("../data/fish.data.csv")
fish.species
names(fish.species[,1])
names(fish.species[1])
names(fish.species[1]) <- "Year"
names(fish.species)
names(fish.species[1]) <- "Year"
names(fish.species)
fish.species <- read.csv2("../data/fish.data.csv")
names(fish.species) <- c("Year","Pink","Chum","Sockeye","Coho","Rainbow",
"Chinook","Atlantic")
fish.species
# Check the structure as a starting point
str(fish.species)
# Use gather to go from fish.species to fish.tidy
fish.tidy <- gather(fish.species, Species, Capture, -Year)
library(tidyr)
library(tidyr)
# Use gather to go from fish.species to fish.tidy
fish.tidy <- gather(fish.species, Species, Capture, -Year)
fish.tidy
# Recreate the plot shown on the right
ggplot(fish.tidy, aes(x = Year, y = Capture, color = Species)) +
geom_line()
